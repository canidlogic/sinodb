#!/usr/bin/env perl
use strict;
use warnings;

# Core dependencies
use Encode qw(decode);
use Unicode::Normalize;

# Sino imports
use Sino::DB;
use SinoConfig;

=head1 NAME

check_merge.pl - Look for ambiguous and missing mappings from the Sino
DB to a CC-CEDICT index file.

=head1 SYNOPSIS

  ./check_merge.pl < dictindex.txt

=head1 DESCRIPTION

This script checks the connection between data in a CC-CEDICT index file
generated by the dictkey.pl script and the TOCFL data currently in the
Sino database, entered with the import_tocfl.pl script.

=cut

# ==================
# Program entrypoint
# ==================

# Check that no parameters
#
($#ARGV < 0) or die "Not expecting program arguments, stopped";

# Switch input and output to UTF-8 and CR+LF decoding
#
binmode(STDIN,  ":encoding(UTF-8) :crlf") or
  die "Failed to set UTF-8 input, stopped";
binmode(STDERR, ":encoding(UTF-8) :crlf") or
  die "Failed to set UTF-8 output, stopped";
binmode(STDOUT, ":encoding(UTF-8) :crlf") or
  die "Failed to set UTF-8 output, stopped";

# Assemble the index in a hash
#
my %dh;
for(my $ltext = <STDIN>; defined($ltext); $ltext = <STDIN>) {
  # Drop line break
  chomp $ltext;
  
  # Skip blank lines
  if ($ltext =~ /\A[ \t]*\z/) {
    next;
  }
  
  # Parse the index line
  ($ltext =~ /\A([^ ]+ [^ ]+) ([^ ]+)\z/) or
    die "Invalid index, stopped";
  my $key = $1;
  my $val = int($2);
  
  # Add to memory index
  $dh{$key} = $val;
}

# Create tone-less hash without proper names
#
my %tlh;
for my $k (keys %dh) {
  # Skip * keys
  if ($k =~ /\*/) {
    next;
  }
  
  # Decompose Unicode in key
  my $kd = NFD($k);
  
  # Drop grave accent, acute accent, macron, and caron
  $kd =~ s/[\x{300}\x{301}\x{304}\x{30c}]//g;
  
  # Recompose Unicode
  $kd = NFC($kd);
  
  # Get value
  my $val = $dh{$k};
  
  # Add mapping to new hash, setting ambiguous if already ambiguous or
  # if there is a current value that is different
  if (defined $tlh{$kd}) {
    # Defined -- if current value is different, change to ambiguous
    if ($tlh{$kd} != $val) {
      $tlh{$kd} = -1;
    }
    
  } else {
    # Not defined yet, so enter new record
    $tlh{$kd} = $val;
  }
}

# Create tone-less hash of proper names
#
my %tln;
for my $k (keys %dh) {
  # Skip keys without *
  unless ($k =~ /\*/) {
    next;
  }
  
  # Decompose Unicode in key
  my $kd = NFD($k);
  
  # Drop grave accent, acute accent, macron, and caron
  $kd =~ s/[\x{300}\x{301}\x{304}\x{30c}]//g;
  
  # Recompose Unicode
  $kd = NFC($kd);
  
  # Drop the asterisk
  $kd =~ s/\*//g;
  
  # Get value
  my $val = $dh{$k};
  
  # Add mapping to new hash, setting ambiguous if already ambiguous or
  # if there is a current value that is different
  if (defined $tln{$kd}) {
    # Defined -- if current value is different, change to ambiguous
    if ($tln{$kd} != $val) {
      $tln{$kd} = -1;
    }
    
  } else {
    # Not defined yet, so enter new record
    $tln{$kd} = $val;
  }
}

# Create hash of just traditional characters, excluding proper names
#
my %tch;
for my $k (keys %dh) {
  # Skip * keys
  if ($k =~ /\*/) {
    next;
  }
  
  # Get abbreviated key
  ($k =~ /\A([^ ]+)/) or die "Unexpected";
  my $kd = $1;
  
  # Get value
  my $val = $dh{$k};
  
  # Add mapping to new hash, setting ambiguous if already ambiguous or
  # if there is a current value that is different
  if (defined $tch{$kd}) {
    # Defined -- if current value is different, change to ambiguous
    if ($tch{$kd} != $val) {
      $tch{$kd} = -1;
    }
    
  } else {
    # Not defined yet, so enter new record
    $tch{$kd} = $val;
  }
}

# Create hash of just traditional characters, proper names
#
my %tcn;
for my $k (keys %dh) {
  # Skip keys without *
  unless ($k =~ /\*/) {
    next;
  }
  
  # Get abbreviated key
  ($k =~ /\A([^ ]+)/) or die "Unexpected";
  my $kd = $1;
  
  # Get value
  my $val = $dh{$k};
  
  # Add mapping to new hash, setting ambiguous if already ambiguous or
  # if there is a current value that is different
  if (defined $tcn{$kd}) {
    # Defined -- if current value is different, change to ambiguous
    if ($tcn{$kd} != $val) {
      $tcn{$kd} = -1;
    }
    
  } else {
    # Not defined yet, so enter new record
    $tcn{$kd} = $val;
  }
}

# Open database connection to existing database
#
my $dbc = Sino::DB->connect($config_dbpath, 0);

# Start a read transaction for everything
#
my $dbh = $dbc->beginWork('r');

# Get the IDs of all words
#
my $words = $dbh->selectall_arrayref(
              'SELECT wordid FROM word ORDER BY wordid ASC');
(ref($words) eq 'ARRAY') or die "No records to examine, stopped";

# Go through each word
#
for my $word (@$words) {
  # Get the word ID
  my $wordid = $word->[0];
  
  # Get all traditional character renderings
  my $tcr = $dbh->selectall_arrayref(
              'SELECT hantrad FROM han WHERE wordid=? '
              . 'ORDER BY hanord ASC',
              undef,
              $wordid);
  (ref($tcr) eq 'ARRAY') or die "Word lacks Han renderings, stopped";

  my @tcs;
  for my $r (@$tcr) {
    push @tcs, (decode('UTF-8', $r->[0],
                Encode::FB_CROAK | Encode::LEAVE_SRC));
  }

  # Get all Pinyin renderings
  my $pcr = $dbh->selectall_arrayref(
              'SELECT pnytext FROM pny WHERE wordid=? '
              . 'ORDER BY pnyord ASC',
              undef,
              $wordid);
  (ref($pcr) eq 'ARRAY') or die "Word lacks Pinyin, stopped";
  
  my @pys;
  for my $r (@$pcr) {
    push @pys, (decode('UTF-8', $r->[0],
                Encode::FB_CROAK | Encode::LEAVE_SRC));
  }

  # Get unique Pinyin renderings with tone removed
  my @pyu;
  for my $p (@pys) {
    my $pu = NFD($p);
    $pu =~ s/[\x{300}\x{301}\x{304}\x{30c}]//g;
    $pu = NFC($pu);
    
    my $already = 0;
    for my $q (@pyu) {
      if ($q eq $pu) {
        $already = 1;
        last;
      }
    }
    unless ($already) {
      push @pyu, ($pu);
    }
  }
  
  # Go through all traditional/Pinyin combinations, figuring out all
  # unique, non-ambiguous line numbers, using toneless mapping
  my @result;
  for(my $j = 0; $j <= $#tcs; $j++) {
    for(my $i = 0; $i <= $#pyu; $i++) {
      
      # Generate the appropriate key
      my $genkey;
      $genkey = "$tcs[$j] $pyu[$i]";

      # Look up in index
      if (defined $tlh{$genkey}) {
        if ($tlh{$genkey} != -1) {
          my $already = 0;
          for my $z (@result) {
            if ($z == $tlh{$genkey}) {
              $already = 1;
              last;
            }
          }
          unless ($already) {
            push @result, ($tlh{$genkey});
          }
        }
      }
    }
  }
  
  # If we didn't get exactly one result from that, run it again this
  # time using the tones
  unless ($#result == 0) {
    @result = ();
    for(my $j = 0; $j <= $#tcs; $j++) {
      for(my $i = 0; $i <= $#pys; $i++) {
        
        # Generate the appropriate key
        my $genkey;
        $genkey = "$tcs[$j] $pys[$i]";
  
        # Look up in index
        if (defined $dh{$genkey}) {
          if ($dh{$genkey} != -1) {
            my $already = 0;
            for my $z (@result) {
              if ($z == $dh{$genkey}) {
                $already = 1;
                last;
              }
            }
            unless ($already) {
              push @result, ($dh{$genkey});
            }
          }
        }
      }
    }
  }
  
  # If we don't have any results, do a proper name query without tones
  if ($#result < 0) {
    for(my $j = 0; $j <= $#tcs; $j++) {
      for(my $i = 0; $i <= $#pyu; $i++) {
        
        # Generate the appropriate key
        my $genkey;
        $genkey = "$tcs[$j] $pyu[$i]";
  
        # Look up in index
        if (defined $tln{$genkey}) {
          if ($tln{$genkey} != -1) {
            my $already = 0;
            for my $z (@result) {
              if ($z == $tln{$genkey}) {
                $already = 1;
                last;
              }
            }
            unless ($already) {
              push @result, ($tln{$genkey});
            }
          }
        }
      }
    }
  }
  
  # If we still don't have any results, query by traditional characters
  # only
  if ($#result < 0) {
    for(my $i = 0; $i <= $#tcs; $i++) {
      my $genkey = $tcs[$i];
      if (defined $tch{$genkey}) {
        if ($tch{$genkey} != -1) {
          my $already = 0;
          for my $z (@result) {
            if ($z == $tch{$genkey}) {
              $already = 1;
              last;
            }
          }
          unless ($already) {
            push @result, ($tch{$genkey});
          }
        }
      }
    }
  }
  
  # Last attempt, query by traditional characters only, proper names
  if ($#result < 0) {
    for(my $i = 0; $i <= $#tcs; $i++) {
      my $genkey = $tcs[$i];
      if (defined $tcn{$genkey}) {
        if ($tcn{$genkey} != -1) {
          my $already = 0;
          for my $z (@result) {
            if ($z == $tcn{$genkey}) {
              $already = 1;
              last;
            }
          }
          unless ($already) {
            push @result, ($tcn{$genkey});
          }
        }
      }
    }
  }
  
  # Report if necessary
  if ($#result < 0) {
    print "Missing: $wordid\n";
    
  } elsif ($#result > 1) {
    print "Multiple: $wordid\n";
  }
}

# If we got here, commit the transaction
#
$dbc->finishWork;

=head1 AUTHOR

Noah Johnson, C<noah.johnson@loupmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2022 Multimedia Data Technology Inc.

MIT License:

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files
(the "Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut
